digraph "AnalysisTree::ToyMC&lt; RandomEngine &gt;"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  Node1 [label="{AnalysisTree::ToyMC\l\< RandomEngine \>\n|# generator_\l# multiplicity_\l# psi_RP_\l# vn_\l# cm_rapidity_\l# pT_dist_\l# y_dist_\l# phi_distr_\l# efficiency_map_\l|+ ToyMC()\l+ ~ToyMC()\l+ Init()\l+ Exec()\l+ Finish()\l+ FillEventInfo()\l+ FillMcParticles()\l+ FillRecoTracks()\l# GetPhi()\l}",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node2 -> Node1 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node2 [label="{AnalysisTree::Task\n|# in_branches_\l# is_init_\l|+ Task()\l+ ~Task()\l+ Init()\l+ Exec()\l+ Finish()\l+ PreInit()\l+ SetInConfiguration()\l+ SetDataHeader()\l+ SetInputBranchNames()\l+ GetInputBranchNames()\l+ IsGoodEvent()\l# ClassDef()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/dcf/classAnalysisTree_1_1Task.html"];
  Node3 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #config_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node3 [label="{AnalysisTree::Configuration\n|# name_\l# branches_\l# matches_\l|+ Configuration()\l+ Configuration()\l+ Configuration()\l+ Configuration()\l+ operator=()\l+ operator=()\l+ AddBranchConfig()\l+ AddMatch()\l+ GetBranchConfig()\l+ GetBranchConfig()\land 8 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/dee/classAnalysisTree_1_1Configuration.html"];
  Node4 -> Node3 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node4 [label="{TObject\n||}",height=0.2,width=0.4,color="grey75", fillcolor="white", style="filled"];
  Node5 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #data_header_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node5 [label="{AnalysisTree::DataHeader\n|# modules_pos_\l# det_pos_\l# system_\l# beam_mom_\l# beam_y_\l# sqrtsNN_\l|+ DataHeader()\l+ DataHeader()\l+ DataHeader()\l+ operator=()\l+ operator=()\l+ AddDetector()\l+ Print()\l+ SetSystem()\l+ SetBeamMomentum()\l+ SetDetectorPosition()\l+ GetBeamRapidity()\l+ GetSystem()\l+ GetDetectorPosition()\l+ GetModulePositions()\l+ GetModulePhi()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d77/classAnalysisTree_1_1DataHeader.html"];
  Node4 -> Node5 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node6 -> Node2 [color="grey25",fontsize="10",style="solid",label=" #event_cuts_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node6 [label="{AnalysisTree::Cuts\n|# name_\l# branch_names_\l# branch_ids_\l# cuts_\l# is_init_\l|+ Cuts()\l+ Cuts()\l+ Cuts()\l+ operator=()\l+ operator=()\l+ ~Cuts()\l+ Cuts()\l+ Cuts()\l+ Apply()\l+ Apply()\land 7 more...\l+ Equal()\l# ClassDef()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d5/dce/classAnalysisTree_1_1Cuts.html",tooltip="Cuts holds list of SimpleCuts and provides Apply function which subsequently applies cuts..."];
  Node7 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #rec_tracks_to_sim_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node7 [label="{AnalysisTree::Matching\n|# branch1_id_\l# branch2_id_\l# match_\l# match_inverted_\l|+ Matching()\l+ Matching()\l+ ~Matching()\l+ AddMatch()\l+ GetMatchDirect()\l+ GetMatchInverted()\l+ GetMatch()\l+ GetMatches()\l+ Clear()\l+ GetBranch1Id()\l+ GetBranch2Id()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/d42/classAnalysisTree_1_1Matching.html"];
  Node8 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #track_detector_\n#particles_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node8 [label="{AnalysisTree::Detector\< T \>\n|# channels_\l|+ Detector()\l+ Detector()\l+ Detector()\l+ Detector()\l+ operator=()\l+ operator=()\l+ ~Detector()\l+ GetNumberOfChannels()\l+ AddChannel()\l+ AddChannel()\land 13 more...\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/da7/classAnalysisTree_1_1Detector.html"];
  Node9 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node9 [label="{AnalysisTree::IndexedObject\n||+ IndexedObject()\l+ IndexedObject()\l+ IndexedObject()\l+ IndexedObject()\l+ operator=()\l+ operator=()\l+ ~IndexedObject()\l+ GetId()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$df/dee/classAnalysisTree_1_1IndexedObject.html"];
  Node10 -> Node8 [dir="back",color="darkgreen",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node10 [label="{AnalysisTree::IndexAccessor\n||+ InitIndexedObject()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d4/da2/classAnalysisTree_1_1IndexAccessor.html"];
  Node11 -> Node1 [color="grey25",fontsize="10",style="solid",label=" #sim_event_header_" ,arrowhead="odiamond",fontname="Helvetica"];
  Node11 [label="{AnalysisTree::EventHeader\n|# vtx_pos_\l|+ EventHeader()\l+ EventHeader()\l+ EventHeader()\l+ EventHeader()\l+ EventHeader()\l+ operator=()\l+ operator=()\l+ GetVertexPosition3()\l+ SetVertexPosition3()\l+ GetField()\l+ GetVertexX()\l+ GetVertexY()\l+ GetVertexZ()\l+ GetChannel()\l+ GetNumberOfChannels()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d8/dd1/classAnalysisTree_1_1EventHeader.html"];
  Node12 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
  Node12 [label="{AnalysisTree::Container\n|# floats_\l# ints_\l# bools_\l|+ Container()\l+ Container()\l+ Container()\l+ Container()\l+ Container()\l+ operator=()\l+ operator=()\l+ ~Container()\l+ Vector()\l+ GetVector()\land 10 more...\l# ClassDefOverride()\l}",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$d2/d0f/classAnalysisTree_1_1Container.html",tooltip="A class to store any number of integers, floats and bools. "];
  Node9 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",arrowtail="onormal",fontname="Helvetica"];
}
